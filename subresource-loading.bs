<pre class="metadata">
Title: Subresource Loading with Web Bundles
Shortname: web-package-subresource-loading
Level: none
Status: CG-DRAFT
Group: WICG
Repository: WICG/webpackage
URL: https://wicg.github.io/webpackage/subresource-loading.html
Editor: Hayato Ito, Google Inc. https://google.com/, hayato@google.com
Abstract: How UAs load subresources from Web Bundles.
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Markup Shorthands: markdown yes, css no
Assume Explicit For: yes
</pre>
<pre class='biblio'>
{
  "draft-ietf-wpack-bundled-responses-latest": {
    "href": "https://wpack-wg.github.io/bundled-responses/draft-ietf-wpack-bundled-responses.html",
    "title": "Web Bundles"
  }
}
</pre>
<pre class='anchors'>
spec: fetch; urlPrefix: https://fetch.spec.whatwg.org/#
  type: dfn
    text: fetch params; url: fetch-params
spec: csp; urlPrefix: https://w3c.github.io/webappsec-csp/#
  type: dfn
    text: policy; url: content-security-policy-object
</pre>
<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; for:/; text:response
spec:html; type:element; text:link
spec:url; type:dfn; for:/; text:url
</pre>

# Introduction # {#intro}

<em>This section is non-normative.</em>

The Subresource Loading with Web Bundles specification describes a way to load a
large number of resources efficiently using a format that allows multiple
resources to be bundled, [Web Bundles](https://web.dev/web-bundles/). This
specification describes how web browsers load those resources. It is expressed
as several monkeypatches to the [[HTML]], [[FETCH]] and [[CSP]] specification
which call algorithms defined here.

Note: This specification is under construction. See
<a href="https://github.com/WICG/webpackage/issues/708">#708</a>.

# Structures # {#structures}

A <dfn>fetched web bundle</dfn> is a representation of a web bundle format
defined in [[draft-ietf-wpack-bundled-responses-latest]].

A <dfn>bundle rule</dfn> is a [=struct=] with the following [=struct/items=]:

- <dfn for="bundle rule">source</dfn>, a [=URL=] of a web bundle.
- <dfn for="bundle rule">credentials</dfn>, a [=request/credentials mode=].
- <dfn for="bundle rule">resources</dfn>, a [=list=] of [=URLs=].
- <dfn for="bundle rule">scopes</dfn>, a [=list=] of [=URLs=].

A <dfn>web bundle</dfn> is a [=struct=] with the following [=struct/items=]:

- <dfn for="web bundle">fetched bundle</dfn>, a [=fetched web bundle=] or null.
- <dfn for="web bundle">rule</dfn>, a [=bundle rule=].
- <dfn for="web bundle">state</dfn>, an internal state which is "fetching",
  "fetched", or "failed". Initially "fetching".

Each [=environment settings object=] will get a
<dfn for="environment settings object">web bundle list</dfn> algorithm, which
returns a [=list=] of [=web bundles=].

A {{Document}} has a <dfn for=Document>web bundle list</dfn>, which is a
[=list=] of [=web bundles=]. It is initially empty.

In <a spec="html">set up a window environment settings object</a>,
<var ignore>settings object</var>'s [=environment settings object/web bundle
list=] returns the [=Document/web bundle list=] of <var ignore>window</var>'s
<a>associated <code>Document</code></a>.

In <a spec="html">set up a worker environment settings object</a>,
<var ignore>settings object</var>'s [=environment settings object/web bundle
list=] returns an empty [=list=].

ISSUE: Not supported for workers.

# HTML monkeypatches # {#html-monkeypatches}

Note: TODO. This section uses [=fetch web bundle=].

# Fetch monkeypatches # {#fetch-monkeypatches}

## Monkeypatch fetch scheme ## {#monkeypatch-fetch-scheme}

Add "`uuid-in-package`" to the schemes listed in <a spec="fetch">fetch
scheme</a>.

Note: This ensures that the <a spec="html">navigate</a> algorithm uses the
<a spec="html">process a navigate fetch</a> algorithm for `uuid-in-package:`
URLs.

Note: The [=url/origin=] of a URL whose scheme is "`uuid-in-package`" is an
opaque origin.

## Monkeypatch HTTP-network-or-cache fetch ## {#monkeypatch-http-network-or-cache-fetch}

In <a spec="fetch">HTTP-network-or-cache fetch</a>, before

> 8.22. Set httpCache to the result of determining the HTTP cache partition,
> given |httpRequest|.

add the following steps:

22. Set the |response| to the result of [=fetch from web bundle=], given
    |httpRequest|.

    1. If |response| is [=network error=], return [=network error=].

    2. If |response| is non-null, skip the steps 8.22-8.24 and goto the step 9.

       Note: That means a subresource from a webbundle never interacts with
       HttpCache. We plan to support HttpCache as a feature enhancement in the
       future.

# CSP monkeypatches # {#csp-monkeypatches}

## Monkeypatch Does request match source list? ## {#monkeypatch-match-request-to-source-list}

Rewrite
<a href="https://w3c.github.io/webappsec-csp/#match-request-to-source-list">Does
|request| match |source list|?</a> to run these steps:

1. Let |url| be |request|'s [=request/current url=].

2. If |url|'s [=url/scheme=] is "`uuid-in-package`", then:

   1. Let |web bundle| be the result of running [=find matching web bundle=]
      given |request|.

   2. If |web bundle| is not null, then set |url| to |web bundle|'s [=web
      bundle/rule=]'s [=bundle rule/source=].

3. Returns the result of executing
   <a href="https://w3c.github.io/webappsec-csp/#match-url-to-source-list">Does
   url match source list in origin with redirect count?</a> on |url|, |source
   list|, |policy|'s [=policy/self-origin=], and |request|'s [=request/redirect
   count=].

Note: This means that CSP restrictions are evaluated against the bundle's URL
instead of to the `uuid-in-package:` URL. See
<a href="https://github.com/WICG/webpackage/issues/651">#651</a> for the
detailed motivation.

## Monkeypatch Does response to request match source list? ## {#monkeypatch-match-response-to-source-list}

Rewrite
<a href="https://w3c.github.io/webappsec-csp/#match-response-to-source-list">Does
|response| to |request| match |source list|?</a> to run these steps:

1. Let |url| be |response|'s [=response/url=].

2. If |url|'s [=url/scheme=] is "`uuid-in-package`", then:

   1. Let |web bundle| be the result of running [=find matching web bundle=]
      given |request|.

   2. If |web bundle| is not null, then set |url| to |web bundle|'s [=web
      bundle/rule=]'s [=bundle rule/source=].

3. Returns the result of executing
   <a href="https://w3c.github.io/webappsec-csp/#match-url-to-source-list">Does
   url match source list in origin with redirect count?</a> on |url|, |source
   list|, |policy|'s [=policy/self-origin=], and |request|'s [=request/redirect
   count=].

Note: This means that CSP restrictions are evaluated against the bundle's URL
instead of to the `uuid-in-package:` URL. See
<a href="https://github.com/WICG/webpackage/issues/651">#651</a> for the
detailed motivation.

# Algorithms # {#algorithms}

## Fetch web bundle ## {#fetch-web-bundle}

To <dfn id="concept-fetch-web-bundle">fetch web bundle</dfn> given [=web
bundle=] |web bundle| and [=fetch params=] |fetch params|:

1. Assert: |web bundle|'s [=web bundle/state=] is "fetching".

1. Let |request| be |fetch params|'s [=request=].

1. Set |request|'s [=request/url=] to |web bundle|'s [=web bundle/rule=]'s
   [=bundle rule/source=].

   Note: Source URL is resolved on document's base URL.

1. Set |request|'s [=request/destination=] to "webbundle",

1. Set |request|'s [=request/mode=] to "cors",

1. Set |request|'s [=request/credentials mode=] to |web bundle|'s [=web
   bundle/rule=]'s [=bundle rule/credentials=].

1. Append a [=header=], a tuple of ("Accept", "application/webbundle;v=b2"), to
   |request|'s [=request/header list=].

   Note: The final [[draft-ietf-wpack-bundled-responses-latest]] will use a
   version of `1`, but this specification tracks whatâ€™s actually implemented in
   browsers, which still uses draft versions.

1. Let |response| be the result of running <a spec="fetch">HTTP-network-or-cache
   fetch</a> given |fetch params|.

   Note: Chromium's current implementation doesn't allow a *nested bundle*. A
   Web bundle is never fetched from other web bundles.

1. If |response|'s [=response/status=] is 200,

   1. Set |web bundle|'s [=web bundle/fetched bundle=] to the result of parsing
      |response|'s body ([[draft-ietf-wpack-bundled-responses-latest]]) and |web
      bundle|'s [=web bundle/state=] be "fetched". If parsing fails, or any
      other conformance is violated, set [=web bundle/fetched bundle=] to null
      and [=web bundle/state=] to "failed".

      Note: In parsing, Chromium's experimental implementation only accepts "b2"
      as a web bundle format version number
      ([[draft-ietf-wpack-bundled-responses-latest]]).

1. Otherwise, set |web bundle|'s [=web bundle/state=] to "failed".

## Fetch from web bundle ## {#fetch-from-web-bundle}

To <dfn id="concept-fetch-from-web-bundle">fetch from web bundle</dfn> given
[=request=] |httpRequest|:

1. Let |web bundle| be the result of running [=find matching web bundle=] given
   |httpRequest|.

2. If |web bundle| is not null:

   1. Let |response| be the result of [=get response from web bundle=] given
      |httpRequest|'s [=request/url=] and |web bundle|.

   2. If |response| is null, return a [=network error=].

      Note: This means a browser does not fallback to fetch a subresource from
      network.

   3. Otherwise, return |response|.

3. Return null.

Note: Returning null here can fallback to HTTP cache and ordinal network fetch,
unlike returning a [=network error=] above.

## Find matching web bundle ## {#find-matching-web-bundle}

To <dfn id="concept-find-matching-web-bundle">find matching web bundle</dfn>
given [=request=] |httpRequest|:

1. Let |url| be |httpRequest|'s [=request/url=].

2. For each |web bundle| of |httpRequest|'s [=request/client=]'s [=environment
   settings object/web bundle list=]:

   1. Let |rule| be |web bundle|'s [=web bundle/rule=].

   2. If |url| doesn't meet a path restriction rule, given |rule|'s [=bundle
      rule/source=], then return false.

      Issue: Clarify path restriction rule in algorithm.

   3. If |rule|'s [=bundle rule/resources=] [=list/contains=] |url|, then return
      |web bundle|.

   4. If |url|'s prefix matches any of |rule|'s [=bundle rule/scopes=], then
      return |web bundle|.

      Issue: Clarify prefix match rule in algorithm.

3. Return null.

## Get response from web bundle ## {#get-response-from-web-bundle}

To <dfn id="concept-get-response-from-web-bundle">get response from web
bundle</dfn> given [=url=] |url| and [=web bundle=] |web bundle|:

1. If |web bundle|'s [=web bundle/state=] is "fetching", await until [=web
   bundle/state=] becomes "fetched" or "failed" asynchronously.

2. If |web bundle|'s [=web bundle/state=] is "failed", return null.

3. Assert: |web bundle|'s [=web bundle/fetched bundle=] is non-null.

4. Returns [=response=] from |web bundle|'s [=web bundle/fetched bundle=] given
   |url| ([[draft-ietf-wpack-bundled-responses-latest]]). If a representation of
   |url| is not found in [=web bundle/fetched bundle=], return null.
