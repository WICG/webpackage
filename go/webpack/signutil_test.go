package webpack_test

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/rsa"
	"math/big"
	"testing"

	"github.com/dimich-g/webpackage/go/webpack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const msg = "This is a long message that's longer than a valid SHA512 hash. Really, it is."

func signatureTest(t *testing.T, key crypto.Signer) {
	require := require.New(t)
	assert := assert.New(t)

	sig, err := webpack.Sign(key, []byte(msg))
	require.NoError(err)
	assert.NoError(webpack.Verify(key.Public(), []byte(msg), sig))

	assert.Error(webpack.Verify(key.Public(), []byte("Wrong message"), sig))
	sig[0] = ^sig[0]
	assert.Error(webpack.Verify(key.Public(), []byte(msg), sig))
}

func TestSignRsa2048(t *testing.T) {
	// Hard-code the RSA key to save time.
	N, _ := new(big.Int).SetString("afe1df19db81e581ea80c71f3bd3d71d51f81ffeb576442a561eed0a1f200576bc122945a4262915d6ff2ec888aed64135ae0bd459a37e5112123d93bde83376333d828de91950091e1df03d89793361897d3b1c9172f071090a97e34d7052c596fb9051a230a6101a94bb1094d50c050676203fe12efeddcf38c9a047257711a5fe2a3800b58fdda71bc848d3d68d8137e3bd36f62da708b805baa5062661a961dd2c44c727c7148f3b2932a21820d604d0f773436e85beda017e7111edf38e145bfd29dce081b42a50383bf329e8f6749bbc030fb0d1b6d8d21e1efc8d720abff0ab2e50dfc44b13ffc3e0dc659c2b7e2f17a045c1487f2aa126e38318cb11", 16)
	require.Equal(t, 2048, N.BitLen())
	E := 0x10001
	D, _ := new(big.Int).SetString("672f9bc53ecbe18b2bba2b983e705527057d0dc05053b7402350777ed5ade2a6bb45e862cc1ffb40ade6fe5a761e24e3130c2e3281f872563bc4e9cd70bff6d924ccb4786f460377a5eca89261c1f28c09aea7ec65c4ca1d76d17934c8acda52c3f688bfebe8a0b497f3a41fe1417090ce2ea552f4d8ae7c1163de9ea2beef303929ea3b4826cbc157e20b1bf7f4be116d4dae6a37a55aaca95349d83ad29194f543db062ce3d17be54e0f2f57a8f6817f74c77af3fdb5dfb65bca30bfab44986efe380e178f34f0559de73d8884ec4d34b5b39f7397077e9772b5dcd63860c79669cc3d4c190459076de76acfd1e52957ada1a8a4c16ce25ffeaa62598b18e5", 16)
	P, _ := new(big.Int).SetString("defbceb58ea209484bd2fe41f5a878682437268738b627643f670e30c0ba60bb84e2f45d73bc78f379080b1311f8d4ab54427f415d4f2ad7b1c26f6c069d620770db6e5235f6aee3cd8008883f0ea703a7947d88d3d2858bc406dfc8e3de17da650c9dd32b78d8c26f2f57526c82f1a9153795893a8e54026b8729cdb560533f", 16)
	Q, _ := new(big.Int).SetString("c9ecb06b7e0a5d5c9c84bd48734fc77d3bb5832f74ec16732e44b35e5acd784b1787d5f2cab348c0584baedcd28fe63f40176db25f30b3557eaf9e385540eb850e88da8e99e35415d9a54b9c30406e6e4a3740fff9a131e782018169ead0be36fdf0b112bac6a7a8fa34a4d394a08cf05b82c65e230e07fd8afe9157b17e5daf", 16)
	key := &rsa.PrivateKey{PublicKey: rsa.PublicKey{N: N, E: E},
		D: D, Primes: []*big.Int{P, Q}}
	signatureTest(t, key)
}

func TestSignRsa3072(t *testing.T) {
	// Hard-code the RSA key to save time.
	N, _ := new(big.Int).SetString("a96e6cf64aee7cda661df1d08ec922f39912074d37dee302556316d90b08941e6325e8fbc5787310392daf4147df82d2609e2cab87ba3a57c5da288f9e5fbb593c095087152e1d81373efa04129d0c409561ace193c2cd48e87ea9ed2b49e5ef4fd8f121e1514d19f75214472f66c6f87efad7a84ee5869e135c7ee7e2f95a3f80e8b71071ec8b8baf2051addb730696bd0c764cf518a7f0da49715792a9ded9f2b73e640180379780919a0c30b599bb932240715e267876d08648685dd57275854022ecdb322a94714ce8f1ec63c23f7448d696181dd01ba05fbaee4188a0b2245b4a49a9747451549ddf2c548b123395baf41e91746fe56877c9121adecf4a2cdae5758209e8b569e512fc228aec40f5ca6f1f355d976130d3a7befa6bad2224ad6703fdde4c902871933ed4f77aa0c632c5dce4b83417cdac4d91a6268caea85785b0c6ccf229436555a44b1309633be7668dce1d27636c0dfe1f92e121011275d7f65f251cb07d2fcb20afb5361bce2a68cddaf1bea7b2ac8e294ffbe9cb", 16)
	require.Equal(t, 3072, N.BitLen())
	E := 0x10001
	D, _ := new(big.Int).SetString("74d7750708379d1c53adb4d3f993d5a99dd6e3f8295e68b874400842972c4c510458e169b70d507450aa23a0e63aca11e0955402da6fdfca25e443727f6a4f5dc35c3d0f5ad8d97a01aa496a4397d01a3daa0539eed739105d5cf43c5d4cf1e76dee12a425a9167da0a416dddc5f893957000f76bf29e402e12139571a9c90d31847e3eed051ab0e22302c83b3c1883aad9689829ac76d1158c7ab05145c5715801f44445d1099c5bde12b15db057145fcba732c7b1c16990146896a87c329d1a79a3299ea2caf25fed686c63274fafacfe76d3397c90e9a11d3b474e103dda14370bae5d5e14051c69776fd3ad4875664b5f8711e4d742a313db6cd4153827bb53ee5b61a3c6d454326089dfd7f53061cef7468949cd53d7f1336349b2de618651281ec3abb5b53acebc0fc277a7e0cf33176eac18f9a1a3f1442da7d441628bb3461751dcd60a40ac1154ec0d6a39f75d91710cc6c711efa0079cf16e5de63f1a7d873bd3bacdd2a65f5d31dd63323d54c69dd17833cac02e807abb2e21af9", 16)
	P, _ := new(big.Int).SetString("dfdef72d1ca82e80ca269f78b6ca934882266d307bd3b89b6755ea20b55f2ac342e89604b1ea069237b262a18dd2a593b29e6c85d2b438933ad4fb10b59cd3f9a4611673f7dcc7627d035243b83d1f1095294d53e8def894f62c9486eaa140f0b6dde4d55c86b282d77a24692d5aa02fd33da08aa76dfffb55f552e32e228a79a2f7ebc8355764fa1dbaf7ec973edc6bc311bc6bb9afe80a82108658480060bd669adbe825600b3b33c0b12a4fcbd988dd4cb9a7f220578e237026125f7db0bd", 16)
	Q, _ := new(big.Int).SetString("c1bf58597290c071c2a9fac1f5fc9e5802bc39f25471e32506423f754e41feb5946b2f889c9f32df06c1019c4ef4743e58cd989f884ebecd82e9c5e4efe92ed04570c7a758c1ef6db1505e107a67e65d501be62770c8a1a69677b6c2cd4b4bd4be0a77fce1dc855ab4f0946250938f8e5b609ed3697c98705c7765b8d6ec9417e3204dd84820344ee91890c6e342823f9c44842a68c5eb6ef12440b1f93b79a5e57c524c2c3671f4f1530ce20c18305a2e8275813eae90e3d4772025f82e4127", 16)
	key := &rsa.PrivateKey{PublicKey: rsa.PublicKey{N: N, E: E},
		D: D, Primes: []*big.Int{P, Q}}
	signatureTest(t, key)
}

func TestSignRsa4096(t *testing.T) {
	// Hard-code the RSA key to save time.
	N, _ := new(big.Int).SetString("be8f4c667f52daedb55798425a2798bf0d075d9d3b74e8a610ef3b0ac09e133ca07d3712182639c60bb776650f21d32a0f89ffaeeb4fb2b0269285553a3f99a81ec1818f035ae38012105ce083b566ae629530432e8daf78a3898300332b4807d0886129b48ccc5eaf4b6b623ab36b2fc9ee04ea362eb4f3e430015448ad528574275c52e624a18685d519b4d64f501a9c235062618cd8753be44d1bea4395918c8e65177224c01217764388bd12f84b3a7b5dc5d4cdc2592355d56200913631c46d52410bc8ad71852249372621aac681c64dce6069eae53d13726f6bd4778abbc163418015080aa290bd7e1e748d8e3991d89f7e0379f62925b704995de2d98b8c0def9b2a859d4f5801c51be7437673255d2b8190723a57f29c571dbdae1855276d3ab1d1f287580c94c1a9eac138de31158356d0de2d938c851d2fef7f4c873c69e590c4cf87c399e3ac3862f131ce9a25a2be1a679409c02bbb8db28faa1bac0f72b354fc0a16eee4083cdf0894cf684efa4b388ed88394e96eb52edbf7e5bb8c2e3e042f2356a9508db995ef66ee30909fba83f420d7173ebfbbfc7301a447e94ca4a89c57fc19b67ff1c16f047f727116dc0a19af6365f5ab65ddec95397042198c3df0ba7fd9d00920e56cac9d16cd91a55aff53611c63bf1cfea92d55c15f20c6a8a16c8bdc03f7fcdf537c1b8f3a1050ab30b417a4f730b106619b", 16)
	require.Equal(t, 4096, N.BitLen())
	E := 0x10001
	D, _ := new(big.Int).SetString("b80b2e7ecff9f5f81f6cba615b31631522403ae9e0c2c8ef9aeb72daafadfc66519a9dd59bfd4f4f3781b997614609ec5595b29bfe28bb2be6151d31735079d725dd3e84217966c00ab2430194335f388d7e095ed9577e61c590ca352736661b260c91caf5d6068c6c412b3573fc5549927d8fc1a512f73196f1c656e0da8518df562494ec31f4cf37f2d9210edb0b42a80a7358915eb6b08367bc1179f04c4486bc0066e49719ea5f3e997b37215b2d4d0e5942f884c16fd5f0d06616a628f168052dac24f56c8e7746e5ef9da4668bd24af45a9e43adda3962cee34e01a67317636fb9933abcc988b8c24b4c9ec518d8014476c5fe158ce9b0c3526dcd7f896fb4a35f676379abb8bde4e95b339eab6651414b11510f60dad7a7a69b205ce165bebb0716f9f5251b705dbeecdc01e1b26c4755896c2358ed346a98b83529a6ba191629d8811f5242c9a27eea1f92246c542f8f1a364a7429b4c23071d6a24b066dd83ef0050d53c71c3a75f85ca86858b909efc20447bd5d152319cb0e11050682a58f573860a6cd8b7d757190e15e9f25cbf2f5a906ef284cd6ede25306101c170e98a4d7315dd55733af739027a7673ed6e8c32f4e6e36a106e4c38f87bb010666dd6b2801b0cd007a59e966e1a59fb8ef0be2696983ac4803b76e08eb384bf7661e9ed53448709720365a804426f432ab7f1fb451c7ac349715d2092401", 16)
	P, _ := new(big.Int).SetString("c7ce550fb8366dd838ec1e9129ed6328c2497b1e322fc442e7c4ae6f83709a58951e7e758035e166e1e2bd812cc61139218b9d4e734f4cccea35618f4dc5cfc17182cd4ce35fa8a3ea27130afb37e7ef4b4cbfe46409824d0abcd7e4ac7543711cf90fe8bff163a7eb94afdce6061888164160b830f2fbc99919c46be2131e861cd6cc0404665bee9670f8b9fbf95296e31512f60cb78925b34669309b3607d5d2fbcca19f227a2ebeab86b1a83af7fb56fbbcfbc50e68c98d730f6c0c3bb17768c4c6485d54c2157d8b00c5c29907e31656b9146673a0b1823978c0a724f08e2ae2f8e8aa28f171c18ee89ba200a5ca49386c18dc1693513f2a65a9445c0969", 16)
	Q, _ := new(big.Int).SetString("f4274134beb4061b56b4c334b8a75424414f2b30f4aad625155ab32744982cd99fced17f3b710c99cb3cc3a5a7be833a48a0515f459a3c748699d34228c5a23ab29657bb2c93003e4eda33fe1d34e3316f66a6d492bb53e46c5704390809b4a92b8235f97b024785cebfeca76162830e034e64e7752cf1ca2c2746fd33c18c2faefa50c9b0232a0d7a630225165eee284ee852da55efa2890e58fdb3a71cf819d1a816c7cdefe984960023df365f44da815a3ce039d488a835a9234fdfc39399823bc2566aaec29adac38520478442919c1c6dc5a700f282b8879c0c3ca4d06e47ecf375f4af7f324b1459f281fe648a81fe268cc3d6adf7f327b95971330e63", 16)
	key := &rsa.PrivateKey{PublicKey: rsa.PublicKey{N: N, E: E},
		D: D, Primes: []*big.Int{P, Q}}
	signatureTest(t, key)
}

func TestSignSecp256(t *testing.T) {
	key, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	require.NoError(t, err)
	signatureTest(t, key)
}

func TestSignSecp384(t *testing.T) {
	key, err := ecdsa.GenerateKey(elliptic.P384(), rand.Reader)
	require.NoError(t, err)
	signatureTest(t, key)
}

func TestSignSecp521(t *testing.T) {
	key, err := ecdsa.GenerateKey(elliptic.P521(), rand.Reader)
	require.NoError(t, err)
	signatureTest(t, key)
}
